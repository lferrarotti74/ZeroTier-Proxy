name: Build release image

# Add permissions block
permissions:
  contents: write  # Required for updating variables
  packages: write
  actions: write   # Required for updating repository variables

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'information'
        type: choice
        options:
          - information
          - debug
          - warning
          - critical
      tags:
        description: 'Purpose of Run This Workflow?'
        required: true
        type: string
  push:
    branches:
      - "main"
    paths-ignore:
      # Documentation files
      - '*.md'
      - 'docs/**'
      - '.github/**/*.md'
      
      # License and legal files
      - 'LICENSE*'
      - 'COPYING*'
      - 'COPYRIGHT*'
      
      # Git and GitHub specific files
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - '.github/dependabot.yml'
      - '.github/CODEOWNERS'
      
      # Editor and IDE files
      - '.vscode/**'
      - '.idea/**'
      - '*.swp'
      - '*.swo'
      - '*~'
      
      # Package manager files that don't affect builds
      - '.npmignore'
      - '.dockerignore'
      - '.eslintignore'
      - '.prettierignore'
      
      # CI/CD configuration for other systems
      - '.travis.yml'
      - '.circleci/**'
      - 'Jenkinsfile'
      - '.gitlab-ci.yml'
      
      # Common non-code files
      - '*.txt'
      - 'CHANGELOG*'
      - 'CONTRIBUTING*'
      - 'AUTHORS*'
      - 'MAINTAINERS*'

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/zerotier-proxy
  GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/zerotier-proxy

jobs:
  # Dummy SonarQube Analysis for Dependabot
  sonarqube-dummy:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Skip SonarQube scan
        run: echo "Skipping SonarQube scan for Dependabot PRs"

  # SonarQube Analysis Job
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: >
      github.actor != 'dependabot[bot]' && (
        (github.event_name == 'push' || github.event_name == 'pull_request') ||
        (github.event_name == 'schedule' && needs.check-base-image.outputs.should_build == 'true')
      )
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0  # Required for proper blame/coverage tracking

      - name: Cache SonarQube packages
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Prepare SonarQube arguments
        id: sonar-args
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "args=-Dsonar.projectKey=lferrarotti74_ZeroTier-Proxy \
                  -Dsonar.organization=lferrarotti74 \
                  -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
                  -Dsonar.pullrequest.branch=${{ github.head_ref }} \
                  -Dsonar.pullrequest.base=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          else
            echo "args=-Dsonar.projectKey=lferrarotti74_ZeroTier-Proxy \
                  -Dsonar.organization=lferrarotti74 \
                  -Dsonar.branch.name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ steps.sonar-args.outputs.args }}

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          {name: "linux/amd64", tag: "amd64"}
          #{name: "linux/arm64/v8", tag: "arm64v8"},
          #{name: "linux/arm/v7", tag: "arm32v7"}
          # Uncomment additional architectures as needed
          # {name: "linux/i386", tag: "i386"},
          # {name: "linux/arm/v6", tag: "arm32v6"},
          # {name: "linux/ppc64le", tag: "ppc64le"},
          # {name: "linux/riscv64", tag: "riscv64"},
          # {name: "linux/s390x", tag: "s390x"}
        ]
    steps:
      - name: Print the Purpose of Run
        run: |
          echo "Purpose of Run: ${{ inputs.tags }}"
        
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        
      - name: Prepare
        run: |
          platform=${{ matrix.platform.name }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> "$GITHUB_ENV"
          
      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@925b5d99a3f1e4bd7b4e9928be4e2491e29891d9 # v5
        id: source-env
        with:
          env-file: env/.env

      - name: Echo Zerotier Proxy Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.zerotierproxy_version }} >> "$GITHUB_ENV"
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}
   
      - name: Log in to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up QEMU for Multi-Arch Builds
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: all

      - name: Verify QEMU Installation
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          echo "QEMU has been set up successfully."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          version: latest

      # Add caching for Docker layers
      - name: Cache Docker layers
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.platform.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.platform.name }}-
            ${{ runner.os }}-buildx-
          
      - name: Build and Push Image by Digest
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          platforms: ${{ matrix.platform.name }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: VERSION=${{ env.ZEROTIERPROXY_VERSION }}
          provenance: mode=max
          sbom: true
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # This is a workaround to prevent cache size from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Debug DOCKER_METADATA_OUTPUT_JSON
        run: |
          echo "$DOCKER_METADATA_OUTPUT_JSON"
          
      - name: Export and Debug Uploaded Digests
        run: |
          mkdir -p /tmp/digests
          if [ -z "${{ steps.build.outputs.digest }}" ]; then
            echo "Error: No digest found!" && exit 1
          fi
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          echo "Digest file created:"
          ls -l /tmp/digests
          
      - name: Upload Digest
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: 
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        
      - name: Download digests
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
          
      - name: List digests downloaded
        run: |
          echo "Digest files retrieved:"
          ls -l /tmp/digests
        
      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@925b5d99a3f1e4bd7b4e9928be4e2491e29891d9 # v5
        id: source-env
        with:
          env-file: env/.env

      - name: Echo Zerotier Proxy Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.zerotierproxy_version }} >> "$GITHUB_ENV"
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          
      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:latest \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:${{ env.ZEROTIERPROXY_VERSION }} \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)

      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:latest \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:${{ env.ZEROTIERPROXY_VERSION }} \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
            
      - name: Inspect image
        run: |
          echo "Docker Hub images:"
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:latest
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ env.ZEROTIERPROXY_VERSION }}
          echo "GHCR images:"
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:latest
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:${{ env.ZEROTIERPROXY_VERSION }}